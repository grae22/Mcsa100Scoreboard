@page
@model IndexModel
@{
    ViewData["Title"] = "MCSA-KZN 100 Climbs Scoreboard";
}

<html>
<head>
  <environment include="Development">
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css"/>
  </environment>
  <environment exclude="Development">
    <link rel="stylesheet" href="~/css/site.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css"/>
  </environment>
  <title>MCSA-KZN 100 Climbs Scoreboard</title>
</head>
<body>

<div style="vertical-align: top;">
  <a href="@Url.Page("Hikes")">Hiking Leaderboard</a>
</div>

<!-- Header banner -->
<div class="panel panel-default" style="background-color: rgba(255, 255, 255, 0.7);">
  <h1 align="center" class="page-heading">MCSA-KZN 100 Climbs</h1>
  <h4 align="center">~ <span style="font-weight: bold;">@Model.Scoreboard.AnalysedClimbersInRankOrder.Sum(c => c.Climber.RouteCount)</span> climbs logged by <span style="font-weight: bold;">@Model.Scoreboard.AnalysedClimbersInRankOrder.Length</span> climbers ~</h4>
</div>

<!-- Ranking table -->
<p>
  <div>
    <table class="table table-striped table-sizetocontent table-bordered" style="background-color: white;">
      <thead>
      <tr>
        <th>Rank</th>
        <th style="font-size: x-small; text-align: center;">Rank<br/>Change</th>
        <th>Climber</th>
        <th># Climbs</th>
        <th style="font-size: x-small; text-align: center;">To<br/>Win</th>
        <th style="font-size: x-small; text-align: center;">Avg.<br/>Grade</th>
        <th style="font-size: x-small; text-align: center;">Highest<br/>Grade</th>
        <th style="font-size: x-small; text-align: center;">Lowest<br/>Grade</th>
      </tr>
      </thead>
      @{
        if (Model.Scoreboard.AnalysedClimbersInRankOrder.Any())
        {
          int bestRouteCount = Model.Scoreboard.AnalysedClimbersInRankOrder[0].Climber.RouteCount;

          foreach (var climber in @Model.Scoreboard.AnalysedClimbersInRankOrder)
          {
            int rank = climber.Rank;
            string rankDelta = climber.RankDelta > 0 ? $"+{climber.RankDelta}" : $"{climber.RankDelta}";
            string name = climber.Climber.Name;
            int routeCount = climber.Climber.RouteCount;
            string rankDeltaColour = "black";
            string toWin = (rank > 1 ? $"{bestRouteCount - routeCount + 1}" : "-");
            string averageGradeFontSize = climber.HasHighestAverageGrade ? "normal" : "smaller";
            string highestGradeFontSize = climber.HasHighestGradedClimb ? "normal" : "smaller";
            string averageGradeFontWeight = climber.HasHighestAverageGrade ? "bold" : "normal";
            string highestGradeFontWeight = climber.HasHighestGradedClimb ? "bold" : "normal";

            if (climber.RankDelta != 0)
            {
              rankDeltaColour = climber.RankDelta > 0 ? "green" : "darkorange";
            }
            else
            {
              rankDelta = "-";
            }

            <tr>
              <td style="text-align: center;">@rank</td>
              <td style="text-align: center; font-size: smaller; vertical-align: middle; color: @rankDeltaColour;">@rankDelta</td>
              <td style="text-align: left;"><a href="#@name.Replace(" ", "")">@name</a></td>
              <td style="text-align: center;">@routeCount</td>
              <td style="text-align: center; font-size: smaller; vertical-align: middle; color: #606060;">@toWin</td>
              <td style="text-align: center; font-size: @averageGradeFontSize; font-weight: @averageGradeFontWeight; vertical-align: middle; color: #60a0d0;">@climber.AverageGradeClimbed</td>
              <td style="text-align: center; font-size: @highestGradeFontSize; font-weight: @highestGradeFontWeight; vertical-align: middle; color: #a0a0a0;">@climber.HighestGradeClimbed</td>
              <td style="text-align: center; font-size: smaller; vertical-align: middle; color: #a0a0a0;">@climber.LowestGradeClimbed</td>
            </tr>
          }
        }
      }
    </table>
  </div>
</p>

<!-- Grades note -->
<p>
  <div>
    <table class="table table-sizetocontent" style="background-color: rgba(255, 255, 255, 0.75);">
      <tr>
        <td style="font-size: smaller; color: #000000; text-align: center;">
          Grades extracted from route names if bracketed, e.g. Think (16)<br/>
          "Old SA" grades converted using Peak High Mountaineering's table <a href="http://peakhigh.co.za/climbing/rock-grade-comaprison/">here</a>.
        </td>
      </tr>
    </table>
  </div>
</p>

<!-- Narrative -->
@{
  if (@Model.Narrator.Narrative.Length > 0)
  {
    <p>
      <div>
        <table class="table table-sizetocontent table-condensed">
          <thead>
          <th style="font-size: smaller; text-align: center; color: black; background-color: rgba(220, 220, 220, 0.75);">~ Recent Activity ~</th>
          </thead>
          <tbody style="background-color: rgba(255, 255, 255, 0.75);">
          @{
            foreach (var entry in @Model.Narrator.Narrative.Split(Environment.NewLine))
            {
              if (entry.Length == 0)
              {
                continue;
              }

              <tr>
                <td style="font-size: smaller; color: #000000; text-align: left;">@Html.Raw(@entry)</td>
              </tr>
            }
          }
          </tbody>
        </table>
      </div>
    </p>
  }
}

<!-- Climbers' routes -->
@{
  foreach (var climber in @Model.Scoreboard.AnalysedClimbersInRankOrder)
  {
    <p>
      <div>
        <a name="@climber.Climber.Name.Replace(" ", "")"></a>
        <table class="table table-routes" style="background-color: white;">
          <thead><tr><th>#@climber.Rank : @climber.Climber.Name</th></tr></thead>
          @{
            int routeNumber = 1;

            foreach (var route in climber.Climber.Routes)
            {
              <tr>
                <td style="text-align: left;">@routeNumber : @route.Name @route.GradeFriendly</td>
              </tr>

              routeNumber++;
            }
          }
        </table>
      </div>
    </p>
  }
}

<button onclick="topFunction()" id="topBtn" title="Go to top">Top</button>

<environment include="Development">
  <script src="~/lib/jquery/dist/jquery.js"></script>
  <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
  <script src="~/js/jquery.backstretch.min.js"></script>
</environment>
<environment exclude="Development">
  <script src="~/lib/jquery/dist/jquery.js"></script>
  <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
  <script src="~/js/jquery.backstretch.min.js"></script>
</environment>
<script language="javascript">
  $.backstretch("images/background.jpg");

  window.onscroll = function() {
    scrollFunction();
  };

  function scrollFunction() {
    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
      document.getElementById("topBtn").style.display = "block";
    } else {
      document.getElementById("topBtn").style.display = "none";
    }
  }

  function topFunction() {
    document.body.scrollTop = 0; // For Safari
    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
  }
</script>
</body>
</html>